<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">


    <simple-method method-name="fsdCreatePaymentApplication" short-description="Create a Payment Application">
        <if-empty field="parameters.invoiceId">
            <if-empty field="parameters.billingAccountId">
                <if-empty field="parameters.taxAuthGeoId">
                    <if-empty field="parameters.toPaymentId">
                        <if-empty field="parameters.quoteId">
                            <add-error>
                                <fail-property resource="AccountingUiLabels" property="AccountingPaymentApplicationParameterMissing"/>
                            </add-error>
                            <check-errors/>
                        </if-empty>
                    </if-empty>
                </if-empty>
            </if-empty>
        </if-empty>

        <make-value entity-name="PaymentApplication" value-field="paymentAppl"/>
        <set-nonpk-fields map="parameters" value-field="paymentAppl"/>

        <entity-one entity-name="Payment" value-field="payment"/>
        <if-empty field="payment">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingPaymentApplicationParameterMissing"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <call-class-method method-name="getPaymentNotApplied" class-name="org.ofbiz.accounting.payment.PaymentWorker" ret-field="notAppliedPayment">
            <field field="payment" type="GenericValue"/>
        </call-class-method>

        <if-not-empty field="parameters.invoiceId">
            <!-- get the invoice and do some further validation against it -->
            <entity-one entity-name="Invoice" value-field="invoice"/>
            <!-- check the currencies if they are compatible -->
            <if>
                <condition>
                    <and>
                        <if-compare-field field="invoice.currencyUomId" operator="not-equals" to-field="payment.currencyUomId"/>
                        <if-compare-field  field="invoice.currencyUomId" operator="not-equals" to-field="payment.actualCurrencyUomId"/>
                    </and>
                </condition>
                <then>
                    <add-error>
                        <fail-property resource="AccountingUiLabels" property="AccountingCurrenciesOfInvoiceAndPaymentNotCompatible"/>
                    </add-error>
                </then>
            </if>
            <check-errors/>
            <if>
                <condition>
                    <and>
                        <if-compare-field field="invoice.currencyUomId" operator="not-equals" to-field="payment.currencyUomId"/>
                        <if-compare-field  field="invoice.currencyUomId" operator="equals" to-field="payment.actualCurrencyUomId"/>
                    </and>
                </condition>
                <then><!-- if required get the payment amount in foreign currency (local we already have) -->
                    <set field="actual" value="true" type="Boolean"/>
                    <call-class-method method-name="getPaymentNotApplied" class-name="org.ofbiz.accounting.payment.PaymentWorker" ret-field="notAppliedPayment">
                        <field field="payment" type="GenericValue"/>
                        <field field="actual" type="Boolean"/>
                    </call-class-method>
                </then>
            </if>

            <!-- get the amount that has not been applied yet for the invoice (outstanding amount) -->
            <call-class-method method-name="getInvoiceNotApplied" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" ret-field="notAppliedInvoice">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>

            <if-compare-field field="notAppliedInvoice" operator="less-equals" to-field="notAppliedPayment" type="BigDecimal">
                <set field="paymentAppl.amountApplied" from-field="notAppliedInvoice"/>
                <else>
                    <set field="paymentAppl.amountApplied" from-field="notAppliedPayment"/>
                </else>
            </if-compare-field>

            <if-not-empty field="invoice.billingAccountId">
                <set field="paymentAppl.billingAccountId" from-field="invoice.billingAccountId"/>
            </if-not-empty>
        </if-not-empty>

        <if-not-empty field="parameters.toPaymentId">
            <!-- get the to payment and check the parent types are compatible -->
            <entity-one entity-name="Payment" value-field="toPayment">
                <field-map field-name="paymentId" from-field="parameters.toPaymentId"/>
            </entity-one>
            <entity-one value-field="toPaymentType" entity-name="PaymentType">
                <field-map field-name="paymentTypeId" from-field="toPayment.paymentTypeId"/>
            </entity-one>
            <entity-one entity-name="Payment" value-field="payment">
                <field-map field-name="paymentId" from-field="parameters.paymentId"/>
            </entity-one>
            <entity-one value-field="paymentType" entity-name="PaymentType">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
            </entity-one>

            <!-- when amount not provided use the the lowest value available -->
            <if-empty field="parameters.amountApplied">
                <call-class-method method-name="getPaymentNotApplied" class-name="org.ofbiz.accounting.payment.PaymentWorker" ret-field="notAppliedPayment">
                    <field field="payment" type="GenericValue"/>
                </call-class-method>
                <call-class-method method-name="getPaymentNotApplied" class-name="org.ofbiz.accounting.payment.PaymentWorker" ret-field="notAppliedToPayment">
                    <field field="toPayment" type="GenericValue"/>
                </call-class-method>
                <if-compare-field operator="less" field="notAppliedPayment" to-field="notAppliedToPayment">
                    <set field="paymentAppl.amountApplied" from-field="notAppliedPayment"/>
                    <else>
                        <set field="paymentAppl.amountApplied" from-field="notAppliedToPayment"/>
                    </else>
                </if-compare-field>
            </if-empty>
        </if-not-empty>

        <if-not-empty field="parameters.billingAccountId">
            <if-empty field="paymentAppl.amountApplied">
                <set field="paymentAppl.amountApplied" from-field="notAppliedPayment"/>
            </if-empty>
        </if-not-empty>

        <if-not-empty field="parameters.taxAuthGeoId">
            <if-empty field="paymentAppl.amountApplied">
                <set field="paymentAppl.amountApplied" from-field="notAppliedPayment"/>
            </if-empty>
        </if-not-empty>

        <if-not-empty field="parameters.quoteId">
            <set field="paymentAppl.quoteId" from-field="parameters.quoteId"/>
            <if-empty field="paymentAppl.amountApplied">
                <set field="paymentAppl.amountApplied" from-field="notAppliedPayment"/>
            </if-empty>
        </if-not-empty>

        <sequenced-id sequence-name="PaymentApplication" field="paymentAppl.paymentApplicationId"/>
        <field-to-result field="paymentAppl.amountApplied" result-name="amountApplied"/>
        <field-to-result field="paymentAppl.paymentApplicationId" result-name="paymentApplicationId"/>

        <create-value value-field="paymentAppl"/>
        <entity-one value-field="payment" entity-name="Payment"/>
        <field-to-result field="payment.paymentTypeId" result-name="paymentTypeId"/>
    </simple-method>



    <simple-method method-name="fsdCreatePaymentAndApplication" short-description="Create a payment and a payment application for the full amount, also support quote payment">
        <set-service-fields service-name="createPayment" map="parameters" to-map="createPaymentInMap"/>
        <call-service service-name="createPayment" in-map-name="createPaymentInMap">
            <result-to-field field="paymentId" result-name="paymentId"/>
        </call-service>
        <check-errors/>
        <set-service-fields service-name="fsdCreatePaymentApplication" map="parameters" to-map="createPaymentAppInMap"/>
        <set field="createPaymentAppInMap.paymentId" from-field="paymentId"/>
        <set field="createPaymentAppInMap.amountApplied" from-field="parameters.amount"/>
        <call-service service-name="fsdCreatePaymentApplication" in-map-name="createPaymentAppInMap">
            <result-to-field field="paymentApplicationId" result-name="paymentApplicationId"/>
        </call-service>
        <check-errors/>
        <field-to-result field="paymentId" result-name="paymentId"/>
        <field-to-result field="paymentApplicationId" result-name="paymentApplicationId"/>
    </simple-method>

</simple-methods>
