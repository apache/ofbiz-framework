<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns="http://ofbiz.apache.org/Simple-Method" xsi:schemaLocation="http://ofbiz.apache.org/Simple-Method http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="updatePayment" short-description="Update a Payment">
        <make-value entity-name="Payment" value-field="lookupPayment"/>
        <set-pk-fields value-field="lookupPayment" map="parameters"/>

        <find-by-primary-key entity-name="Payment" map="lookupPayment" value-field="payment"/>
        <if>
            <condition>
                <and>
                    <not><if-has-permission permission="ACCOUNTING" action="_UPDATE"/></not>
                    <not><if-has-permission permission="PAY_INFO" action="_UPDATE"/></not>
                    <not><if-compare-field field="userLogin.partyId" to-field="payment.partyIdFrom" operator="equals"/></not>
                    <not><if-compare-field field="userLogin.partyId" to-field="payment.partyIdTo" operator="equals"/></not>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingUpdatePaymentPermissionError"/>
                </add-error>
            </then>
        </if>
        <check-errors/>

        <if-compare field="payment.statusId" value="PMNT_NOT_PAID" operator="not-equals">
            <!-- check if only status change -->
            <make-value entity-name="Payment" value-field="newPayment"/>
            <make-value entity-name="Payment" value-field="oldPayment"/>
            <set-nonpk-fields map="payment" value-field="newPayment"/>
            <set-nonpk-fields map="payment" value-field="oldPayment"/>
            <set-nonpk-fields map="parameters" value-field="newPayment"/>
            <!-- fields :- comments, paymentRefNum, finAccountTransId, statusId can editable for Payment -->
            <set field="oldPayment.statusId" from-field="newPayment.statusId"/>
            <set field="oldPayment.comments" from-field="newPayment.comments"/>
            <set field="oldPayment.paymentRefNum" from-field="newPayment.paymentRefNum" set-if-null="true"/>
            <set field="oldPayment.finAccountTransId" from-field="newPayment.finAccountTransId" set-if-null="true"/>
            <if-compare-field field="oldPayment" to-field="newPayment" operator="not-equals">
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingPSUpdateNotAllowedBecauseOfStatus"/>
                </add-error>
            </if-compare-field>
        </if-compare>
        <check-errors/>

        <set field="statusIdSave" from-field="payment.statusId"/><!-- do not allow status change here -->
        <set-nonpk-fields map="parameters" value-field="payment"/>
        <set field="payment.statusId" from-field="statusIdSave"/><!-- do not allow status change here -->

        <if-empty field="payment.effectiveDate">
            <now-timestamp field="payment.effectiveDate"/>
        </if-empty>
        <if-not-empty field="payment.paymentMethodId">
            <entity-one entity-name="PaymentMethod" value-field="paymentMethod">
                <field-map field-name="paymentMethodId" from-field="payment.paymentMethodId"/>
            </entity-one>
            <if-compare-field field="payment.paymentMethodTypeId" to-field="paymentMethod.paymentMethodTypeId" operator="not-equals">
                <log level="info" message="Replacing passed payment method type [${payment.paymentMethodTypeId}] with payment method type [${paymentMethod.paymentMethodTypeId}] for payment method [${payment.paymentMethodId}]"/>
            </if-compare-field>
            <set field="payment.paymentMethodTypeId" from-field="paymentMethod.paymentMethodTypeId"/>
        </if-not-empty>
        <store-value value-field="payment"/>

        <if-not-empty field="parameters.statusId">
            <if-compare-field field="parameters.statusId" to-field="statusIdSave" operator="not-equals">
                <set-service-fields service-name="setPaymentStatus" map="parameters" to-map="param"/>
                <call-service service-name="setPaymentStatus" in-map-name="param"/>
                <check-errors/>
            </if-compare-field>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="voidPayment" short-description="Service to void a payment">
        <entity-one entity-name="Payment" value-field="payment"/>
        <field-to-result field="payment.finAccountTransId" result-name="finAccountTransId"/>
        <set field="transStatusId" value="FINACT_TRNS_CANCELED"/>
        <field-to-result field="transStatusId" result-name="statusId"/>
        <if-empty field="payment">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingNoPaymentsfound"/>
            </add-error>
            <check-errors/>
        </if-empty>
        <set field="paymentId" from-field="parameters.paymentId"/>
        <set field="paymentStatusCtx.paymentId" from-field="paymentId"/>
        <set field="paymentStatusCtx.statusId" value="PMNT_VOID"/>
        <call-service service-name="setPaymentStatus" in-map-name="paymentStatusCtx"/>
        <get-related relation-name="PaymentApplication" value-field="payment" list="paymentApplications"/>
        <iterate list="paymentApplications" entry="paymentApplication">
            <get-related-one relation-name="Invoice" value-field="paymentApplication" to-value-field="updateInvoiceCtx"/>
            <if-compare field="updateInvoiceCtx.statusId" operator="equals" value="INVOICE_PAID">
                <set-service-fields service-name="setInvoiceStatus" map="updateInvoiceCtx" to-map="invoiceStatusCtx"/>
                <set field="invoiceStatusCtx.paidDate" type="Timestamp" value=""/>
                <set field="invoiceStatusCtx.statusId" value="INVOICE_READY"/>
                <call-service service-name="setInvoiceStatus" in-map-name="invoiceStatusCtx"/>
            </if-compare>
            <set field="removePaymentApplicationCtx.paymentApplicationId" from-field="paymentApplication.paymentApplicationId"/>
            <call-service service-name="removePaymentApplication" in-map-name="removePaymentApplicationCtx"/>
        </iterate>
        <entity-condition entity-name="AcctgTrans" list="acctgTransPaymentList">
            <condition-list combine="and">
                <condition-expr field-name="invoiceId" operator="equals" from-field="nullField"/>
                <condition-expr field-name="paymentId" from-field="paymentId"/>
            </condition-list>
        </entity-condition>
        <iterate list="acctgTransPaymentList" entry="acctgTransPayment">
            <clear-field field="copyAcctgTransCtx"/>
            <set field="copyAcctgTransCtx.fromAcctgTransId" from-field="acctgTransPayment.acctgTransId"/>
            <set field="copyAcctgTransCtx.revert" value="Y"/>
            <call-service service-name="copyAcctgTransAndEntries" in-map-name="copyAcctgTransCtx">
                <result-to-field result-name="acctgTransId" field="postAcctgTransMap.acctgTransId"/>
            </call-service>
            <if-compare field="acctgTransPayment.isPosted" operator="equals" value="Y">
                <call-service service-name="postAcctgTrans" in-map-name="postAcctgTransMap"/>
            </if-compare>
            <clear-field field="postAcctgTransMap"/>
        </iterate>
    </simple-method>

    <simple-method method-name="createPaymentGroupAndMember" short-description="creates PaymentGroup and PaymentGroupMembers">
        <if-empty field="parameters.fromDate">
            <now-timestamp field="parameters.fromDate"/>
        </if-empty>
        <set-service-fields service-name="createPaymentGroup" map="parameters" to-map="createPaymentGroupMap"/>
        <if-empty field="parameters.paymentGroupName">
            <set field="createPaymentGroupMap.paymentGroupName" value="Payment Group Name"/>
        </if-empty>
        <call-service service-name="createPaymentGroup" in-map-name="createPaymentGroupMap">
            <result-to-field result-name="paymentGroupId"/>
            <result-to-result result-name="paymentGroupId"/>
        </call-service>
        <set field="createPaymentGroupMemberMap.paymentGroupId" from-field="paymentGroupId"/>
        <set field="createPaymentGroupMemberMap.fromDate" from-field="parameters.fromDate"/>
        <iterate list="parameters.paymentIds" entry="paymentId">
            <set field="createPaymentGroupMemberMap.paymentId" from-field="paymentId"/>
            <call-service service-name="createPaymentGroupMember" in-map-name="createPaymentGroupMemberMap"/>
        </iterate>
    </simple-method>

    <simple-method method-name="checkAndCreateBatchForValidPayments" short-description="Check the valid(unbatched) payment and create batch for same">
        <set field="paymentIds" from-field="parameters.paymentIds"/>
        <entity-condition entity-name="Payment" list="payments">
            <condition-expr field-name="paymentId" operator="in" from-field="paymentIds"/>
        </entity-condition>
        <iterate list="payments" entry="payment">
            <set field="isReceipt" value="${groovy:org.apache.ofbiz.accounting.util.UtilAccounting.isReceipt(payment)}" type="Boolean"/>
            <if-compare field="isReceipt" operator="equals" value="false" type="Boolean">
                <field-to-list field="payment.paymentId" list="disbursementPaymentIds"/>
            </if-compare>
        </iterate>
        <if-not-empty field="disbursementPaymentIds">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingCannotIncludeApPaymentError"/>
            </add-error>
            <check-errors/>
        </if-not-empty>
        <entity-condition entity-name="PaymentGroupMember" list="paymentGroupMembers" filter-by-date="true">
            <condition-expr field-name="paymentId" operator="in" from-field="paymentIds"/>
        </entity-condition>
        <if-not-empty field="paymentGroupMembers">
            <set field="batchPaymentIds" value="${groovy:org.apache.ofbiz.entity.util.EntityUtil.getFieldListFromEntityList(paymentGroupMembers, 'paymentId', true);}" type="List"/>
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingPaymentsAreAlreadyBatchedError"/>
            </add-error>
            <check-errors/>
        <else>
            <set-service-fields service-name="createPaymentGroupAndMember" map="parameters" to-map="createPaymentGroupAndMemberMap"/>
            <call-service service-name="createPaymentGroupAndMember" in-map-name="createPaymentGroupAndMemberMap">
                <result-to-result result-name="paymentGroupId"/>
            </call-service>
        </else>
        </if-not-empty>
    </simple-method>
</simple-methods>
